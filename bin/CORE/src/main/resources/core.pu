@startuml "core"
class Plateau {
    -nom: String
    -listeAgentites: Map<IAgentite, Case>
    --
    +init(): void
    +placerAgentite(Position, IAgentite): boolean
    +enleverAgentite(Position, IAgentite): IAgentite
    +deplacerAgent(AbstractAgent, Direction): boolean
    +ramasserEntite(AbstractAgent, AbstractEntite): boolean
    +deposerEntite(AbstractAgent, AbstractEntite): boolean
    +getVoisinage(AbstractAgent): Map<Direction, Case>
    +getCase(AbstractAgent): Case
}
interface IAgentPlateau {
    +deplacerAgent(AbstractAgent, Direction): boolean
    +ramasserEntite(AbstractAgent, AbstractEntite): boolean
    +deposerEntite(AbstractAgent, AbstractEntite): boolean
    +getVoisinage(AbstractAgent): Map<Direction, Case>
    +getCase(AbstractAgent): Case
}
interface IEntitePlateau {
    
}
interface IDeveloppeurPlateau {
    +placerAgentite(Position, IAgentite): boolean
    +enleverAgentite(Position, IAgentite): IAgentite
}
class Case {
    -id: int
    --
}
class Position {
    -x: int
    -y: int
}
class InfraAgent #grey {
    --
    +run(): void
    +readMessage(): IMessage
    +readMessages(): List<IMessage>
}
abstract class AbstractAgent {

}
abstract class AbstractEntite {
    -nom: String
    -id: UUID
}
abstract class AbstractEntiteActive {

}
abstract class AbstractEntitePassive {

}
interface IAgentite {

}
class Obstacle {

}
enum Direction {
    N
    NO
    O
    SO
    S
    SE
    E
    NE
}
abstract class AbstractAgentSitue {
    -nom: String
    -id: UUID
    '/!\ un id existe deja dans InfraAgentReference
    --
    seDeplacerVers(Direction): void
    seTournerVers(Direction): void
    avancer(): void
    detecter(): Map<Direction, Case>
    deposer(AbstractEntite entite): void
    ramasser(AbstractEntite entite): void
    {abstract} actionTour(): void
}

AbstractEntiteActive -up-|> AbstractEntite
AbstractEntitePassive -up-|> AbstractEntite
AbstractAgent --> "[1] plateau" IAgentPlateau
AbstractAgentSitue o--> "[0..1] entitePortee" AbstractEntite
AbstractEntite --> "[1] plateau" IEntitePlateau
Plateau *-- "[*] cases" Case
Plateau .up.|> IAgentPlateau
Plateau .up.|> IEntitePlateau
Plateau ..|> IDeveloppeurPlateau
Case --> "[1] position" Position
Case o--> "       [*] agentites" IAgentite
AbstractAgentSitue --> "[1] direction" Direction
AbstractAgentSitue -up-|> AbstractAgent
AbstractAgent -up-|> InfraAgent
Obstacle -up-|> AbstractEntitePassive
AbstractEntite .up.|> IAgentite
AbstractAgent .up.|> IAgentite
@enduml